constant
  af_inet
    2

constant
  af_inet6
    10

constant
  sock_stream
    1

constant
  default_protocol
    0

constant
  ai_passive
    1

struct
  sockaddr
    sa_family: i16,
    sa_data: array(i8, 14),

struct
  addrinfo
    ai_flags: i32,
    ai_family: i32,
    ai_socktype: i32,
    ai_protocol: i32,
    ai_addrlen: u32,
    ai_addr: ptr(sockaddr),
    ai_canonname: ptr(i8),
    ai_next: ptr(addrinfo),

extern
  socket
    <-
      u32,
      u32,
      u32,
    ->
      i32

extern
  bind
    <-
      i32,
      ptr(sockaddr),
      ptr(u32),
    ->
      u32

extern
  getaddrinfo
    <-
      ptr(i8),
      ptr(i8),
      ptr(addrinfo),
      ptr(ptr(addrinfo)),
    ->
      i32

extern
  listen
    <-
      i32,
      i32,
    ->
      i32

extern
  memchr
    <-
      ptr(i8),
      i32,
      u64,
    ->
      ptr(i8)

extern
  puts
    <-
      ptr(i8),
    ->
      void

extern
  putchar
    <-
      u32,
    ->
      void

extern
  putint
    <-
      i32,
    ->
      void

struct
  chunk_t
    data: ptr(i8),
    size: u64,

enum
  partial_http_result_t
    method_chunk(chunk_t),
    method_end(),
    request_uri_chunk(chunk_t),
    request_uri_end(),
    header_key_chunk(chunk_t),
    header_key_end(),
    header_value_chunk(chunk_t),
    header_value_end(),
    body_chunk(chunk_t),
    body_end(),

enum
  partial_result_t
    continue(),
    part(partial_http_result_t),

define
  main
    = {
      let x = af_inet;
      let accept_sock = socket(af_inet, sock_stream, default_protocol);
      let addr: ptr(addrinfo) = null;
      let hints =
        addrinfo(
          ai_passive,
          af_inet,
          sock_stream,
          0,
          0,
          null,
          null,
          null,
        );
      puts("getaddrinfo\00");
      if (getaddrinfo(null, "5000\00", &hints, &addr) != 0) {
        return void;
      }

      puts("socket\00");
      let accept_sock = socket(af_inet, sock_stream, default_protocol);
      if (accept_sock < 0) {
        return void;
      }

      puts("bind\00");
      if (bind(accept_sock, (*addr).ai_addr, &(*addr).ai_addrlen) != 0) {
        return void;
      }

      # puts("listen\00");
      # if (listen(accept_sock, 1024) != 0) {
      #   return void;
      # }

      # loop {
      #   let client_sock = accept(accept_sock);
      # }

      return void;
    }

# define
#   parse_request
#     <=
#       chunk_t
#     =>
#       partial_result_t
#     = {
#       let chunk = yield continue();
#       loop {
#         let outcome = memchr(chunk.data, ' ' as i32, chunk.size);
#         if (outcome == null) {
#           yield part(method_chunk(chunk));
#         } else {
#           let new_size = outcome as u64 - chunk.data as u64;
#           yield part(method_chunk(chunk_t(chunk.data, new_size)));
#           yield part(method_end());
#           break;
#         }
#         chunk = yield continue();
#       }
#     }
# 
# define
#   main
#     = {
#       let coroutine = parse_request();
#       let empty = chunk_t(null, 0);
#       let test = "GET ";
#       let response =
#         resume@(chunk_t, partial_result_t, void)(coroutine, chunk_t(test, 4));
#       response =
#         resume@(chunk_t, partial_result_t, void)(coroutine, empty);
#     }
