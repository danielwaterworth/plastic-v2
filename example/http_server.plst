import network
import console

define
  initialize_accept_socket
    ->
      i32
    = {
      let err: i32 = -1;
      let addr: ptr(network.addrinfo) = null;
      let hints =
        network.addrinfo(
          network.ai_passive,
          network.af_inet,
          network.sock_stream,
          0,
          0,
          null,
          null,
          null,
        );
      console.puts("getaddrinfo\00");
      if (network.getaddrinfo(null, "5000\00", &hints, &addr) != 0) {
        return err;
      }

      let accept_sock: i32 = 0;
      loop {
        console.puts("socket\00");
        accept_sock =
          network.socket(
            network.af_inet,
            network.sock_stream,
            network.default_protocol
          );
        if (accept_sock >= 0) {
          console.puts("bind\00");
          if (network.bind(accept_sock, (*addr).ai_addr, (*addr).ai_addrlen) == 0) {
            console.puts("found a socket\00");
            break;
          }
        }

        addr = (*addr).ai_next;
        if (addr == null) {
          console.puts("failed to find an addr\00");
          return err;
        }
      }

      console.puts("listen\00");
      if (network.listen(accept_sock, 1024) != 0) {
        return err;
      }

      return accept_sock;
    }

define
  main_loop
    <-
      accept_sock: i32,
      epoll_sock: i32,
    ->
      void
    = {
      loop {
        console.puts("epoll_wait\00");
        let events: array(network.epoll_event, 1024);
        let num_ready =
          network.epoll_wait(
            epoll_sock,
            &events[0],
            1000,
            -1
          );
        if (num_ready < 0) {
          console.puts("problem\00");
          return void;
        }

        console.putint(num_ready);
        let i: i32 = 0;
        loop {
          if (i >= num_ready) {
            console.puts("breaking\00");
            break;
          }
          console.putint(i);
          let event = events[i];
          i = i + 1;

          let fd = event.data as i32;
          if (event.events & network.epollin != 0) {
            if (fd == accept_sock) {
              console.puts("new connection available\00");
              let new_connection =
                network.accept(
                  accept_sock,
                  null,
                  null
                );
              let event =
                network.epoll_event(
                  network.epollin,
                  new_connection as u64,
                );
              network.epoll_ctl(
                epoll_sock,
                network.epoll_ctl_add,
                new_connection,
                &event,
              );
            } else {
              console.puts("connection ready to read\00");
              let buffer: array(i8, 1024);
              let length_received =
                network.recv(
                  fd,
                  &buffer[0],
                  1000,
                  network.msg_dontwait,
                );
              console.putint(fd);
            }
          }
        }
      }
    }

define
  test_loop
    = {
      let i: i32 = 0;
      loop {
        if (i >= 5) {
          console.puts("breaking\00");
          break;
        } else {
          console.puts("not breaking\00");
        }
        console.putint(i);
        i = i + 1;
      }
      return void;
    }

define
  main
    = {
      test_loop();

      let accept_sock = initialize_accept_socket();
      if (accept_sock < 0) {
        return void;
      }

      let epoll_sock = network.epoll_create1(0);
      if (epoll_sock < 0) {
        return void;
      }

      let event = network.epoll_event(network.epollin, accept_sock as u64);
      console.putint(accept_sock);
      console.putu64(accept_sock as u64);
      network.epoll_ctl(epoll_sock, network.epoll_ctl_add, accept_sock, &event);

      main_loop(accept_sock, epoll_sock);
      return void;
    }
